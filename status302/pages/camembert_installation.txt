======Installing Camembert======

[[Camembert]] is a lightweight IDE.
This page focuses on the installation process.

It's written in Fantom which runs on the JVM so you will need a JVM ~ sorry about that ;)

===Java 6+===
You must have Java 6 or newer installed.

===Standalone installers===
Then download the proper standalone installer for your platform from here

[[http://www.colar.net/camembert/]]

Once you have the jar you should be able to run Camembert either by double clicking it or running it as such:
<code>
java -jar camembert-1.1.12-linux-x86_64.jar
</code>

===Manual Installation===
Warning: This is only needed if you don't want to use the standalone installer.


You must have [[http://www.fantom.org/ | Fantom]] installed as well.

See the Fantom installation instructions here: [[http://fantom.org/doc/docTools/Setup.html]]

Once Fantom is properly installed you can use it's fanr command to install Camembert:

<code | Install>
fanr install -r http://repo.status302.com/fanr/ camembertIde
</code>

Yo can now run it using
<code | Run>
fan camembertIde
</code>

Warning: If you are on 64 bits Linux or 64 bits Windows, you will want to install the latest stable SWT jar see [[http://fantom.org/doc/docTools/Setup.html#swt|the SWT chapter here]] for more info


=====Linux=====
If you are on Linux and get some SWT errors such as:
<code>
sys::Err: org.eclipse.swt.SWTError: No more handles [Unknown Mozilla path (MOZILLA_FIVE_HOME not set)]
</code>

The solution is usually to install libwebkitgtk-1.0-0
<code>
sudo apt-get install libwebkitgtk-1.0-0
</code>
=====Initial Configuration=====

Upon the first startup Camembert will ask you to pick a folder where it will store all it's configuration files.

Once the application starts you will want to go to Options / Edit config
In options.props **you will want to set srcDirs** to a comma separated list of folder(workspaces) where yur projects sources are.
Each folder may contain many different projects, bascially it's just a project worskpace list.

Once you are there you might want to check shortcuts.props and the licenses & templates folders (optional)

You can also set the individual plugins (see bellow) and then **restart**

====Plugin Configuration / Usage====

Each plugin(langage support) has it's own config folder as well
Here are some details on what you might want to configure for each plugin.

Note: It's possible to "Force" a project to use a given plugin by creating a fie named cam.props in the project folder.
The file contet would be for example : ''prj.type = Go'' meaning te Go plugin will claim it.

===Fantom / Axon Plugin===
Fantom projects are recognized by their build.fan file

You will want to edit Fantom/env_default.props and set fantom_home etc...
You can create multiple environment config files, should you have more than one Fantom version you want to work with.

Fantom projects(pods & pod groups) are recognized by the build.fan file.

===Maven Plugin===
The Maven plugin recognizes Maven projects (by their pom.xml file).

You will want to set the env_home in the Maven/env_default.props file
Such as the ''mvn'' command is under  env_home/bin/node

===Gradle Plugin===
The Gradle plugin recognizes Gradle projects (by their build.gradle file).

You will want to set the env_home in the Gradle/env_default.props file
Such as the env_home for the Graddle home dir.

===Node.js===
Node projects are recognized by their package.json file.

Configure the proper envHome(node.js env root) in Python/env_default.props
Such as the ''node'' command is under  env_home/bin/node

===Python Plugin===
Python projects are recognized by the __init__.py file

Configure the proper envHome in Python/env_default.props
Such as the ''python'' command is under  env_home/bin/node

Note: You need to manually run the doc indexing in the plugind/Python menu


===Go Plugin===
There are no simple way to auto detect G proects, so you need to create cam.props in the project folder:
''echo "prj.type = Go" > cam.props''

Configure the proper envHome(go distro path) in Go/env_default.props
Also setup goPath in there (projects workspace)

Note: You should manually run the doc indexing in the plugins/Go menu at least once.

===Ruby Plugin===
Ruby projects are recognized by the 'Rakefile' file.

Configure the proper rubyPath(ruby command) and riPath(ri command) in Ruby/env_default.props

Make sure the''ri'' command works properly, for example with ''ri -T File.new'' so that the documentation panel will work properly.
If the ri command does not return any docs you might need to setup rdoc-data first
<code | ri setup>
sudo gem install rdoc-data
rdoc-data --install      (might have to run with sudo)
</code>




